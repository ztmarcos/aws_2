service: journal-personal-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    JOURNAL_TABLE_NAME: ${self:custom.tableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}"

custom:
  tableName: JournalPersonalEntries
  webBucketName: journal-personal-web-${self:provider.stage}

functions:
  journalApi:
    handler: handlers/journal-api.handler
    events:
      - http:
          path: /entries
          method: ANY
          cors: true
      - http:
          path: /entries/{id}
          method: ANY
          cors: true

resources:
  Resources:
    JournalPersonalTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    JournalPersonalWebBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webBucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    JournalPersonalWebBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref JournalPersonalWebBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Sub '${JournalPersonalWebBucket}/*'

    JournalPersonalCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt JournalPersonalWebBucket.RegionalDomainName
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            Compress: true
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

  Outputs:
    JournalPersonalApiUrl:
      Description: API Gateway endpoint URL para Journal Personal
      Value: !Sub 'https://${AWS::StackName}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/entries'
      Export:
        Name: ${self:provider.stage}-JournalPersonalApiUrl

    JournalPersonalWebUrl:
      Description: CloudFront distribution URL para Journal Personal
      Value: !Sub 'https://${JournalPersonalCloudFrontDistribution.DomainName}'
      Export:
        Name: ${self:provider.stage}-JournalPersonalWebUrl

    JournalPersonalTableName:
      Description: DynamoDB table name para Journal Personal
      Value: !Ref JournalPersonalTable
      Export:
        Name: ${self:provider.stage}-JournalPersonalTableName
